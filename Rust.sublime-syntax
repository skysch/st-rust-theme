%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Rust
file_extensions: rs
scope: source.rust

variables:
  identifier: '(?:(?:r\#)?{{non_raw_identifier}})'
  camel_identifier: '\b_*[A-Z][a-zA-Z0-9_]*[a-z][a-zA-Z0-9_]*\b'
  upper_identifier: '\b_*[A-Z][a-zA-Z0-9_]*\b'
  non_raw_identifier: '[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+'
  lifetime: '''(?:_|{{non_raw_identifier}})(?!\'')\b'

  escaped_byte: '\\([nrt0\"''\\]|x\h{2})'
  escaped_char: '\\([nrt0\"''\\]|x[0-7]\h|u\{(?:\h_*){1,6}\})'

  int_suffixes: '[iu](?:8|16|32|64|128|size)'
  dec_literal: '[0-9](?:[0-9_])*'
  float_suffixes: 'f(32|64)'
  float_exponent: '[eE][+-]?[0-9_]*[0-9][0-9_]*'

  kw_abstract: '\b(?<!r\#)abstract\b'
  kw_as: '\b(?<!r\#)as\b'
  kw_async: '\b(?<!r\#)async\b'
  kw_await: '\b(?<!r\#)await\b'
  kw_become: '\b(?<!r\#)become\b'
  kw_box: '\b(?<!r\#)box\b'
  kw_break: '\b(?<!r\#)break\b'
  kw_const: '\b(?<!r\#)const\b'
  kw_continue: '\b(?<!r\#)continue\b'
  kw_crate: '\b(?<!r\#)crate\b'
  kw_do: '\b(?<!r\#)do\b'
  kw_dyn: '\b(?<!r\#)dyn\b'
  kw_else: '\b(?<!r\#)else\b'
  kw_enum: '\b(?<!r\#)enum\b'
  kw_extern: '\b(?<!r\#)extern\b'
  kw_false: '\b(?<!r\#)false\b'
  kw_final: '\b(?<!r\#)final\b'
  kw_fn: '\b(?<!r\#)fn\b'
  kw_for: '\b(?<!r\#)for\b'
  kw_if: '\b(?<!r\#)if\b'
  kw_impl: '\b(?<!r\#)impl\b'
  kw_in: '\b(?<!r\#)in\b'
  kw_let: '\b(?<!r\#)let\b'
  kw_loop: '\b(?<!r\#)loop\b'
  kw_macro: '\b(?<!r\#)macro\b'
  kw_match: '\b(?<!r\#)match\b'
  kw_mod: '\b(?<!r\#)mod\b'
  kw_move: '\b(?<!r\#)move\b'
  kw_mut: '\b(?<!r\#)mut\b'
  kw_override: '\b(?<!r\#)override\b'
  kw_priv: '\b(?<!r\#)priv\b'
  kw_pub: '\b(?<!r\#)pub\b'
  kw_ref: '\b(?<!r\#)ref\b'
  kw_return: '\b(?<!r\#)return\b'
  kw_self: '\b(?<!r\#)self\b'
  kw_Self: '\b(?<!r\#)Self\b'
  kw_static: '\b(?<!r\#)static\b'
  kw_struct: '\b(?<!r\#)struct\b'
  kw_super: '\b(?<!r\#)super\b'
  kw_trait: '\b(?<!r\#)trait\b'
  kw_true: '\b(?<!r\#)true\b'
  kw_try: '\b(?<!r\#)try\b'
  kw_type: '\b(?<!r\#)type\b'
  kw_typeof: '\b(?<!r\#)typeof\b'
  kw_union: '\b(?<!r\#)union\b'
  kw_unsafe: '\b(?<!r\#)unsafe\b'
  kw_unsized: '\b(?<!r\#)unsized\b'
  kw_use: '\b(?<!r\#)use\b'
  kw_virtual: '\b(?<!r\#)virtual\b'
  kw_where: '\b(?<!r\#)where\b'
  kw_while: '\b(?<!r\#)while\b'
  kw_yield: '\b(?<!r\#)yield\b'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    # Comments are allowed everywhere.
    - include: comments
    # Macro variables are allowed everywhere.
    - match: '\${{identifier}}'
      scope: variable.other.rust

  main:
    - include: statements



  # Statements
  # ============================================================================
  statements:
    # - include: simple-path
    # - include: path-in-expression
    # - include: qualified-path-in-expression
    - include: type



  # Blocks
  # ============================================================================

  # Extern crate items
  # ============================================================================
  # Use items
  # ============================================================================
  # Mod items
  # ============================================================================
  # Struct items
  # ============================================================================
  # Enum items
  # ============================================================================
  # Union items
  # ============================================================================
  # Trait items
  # ============================================================================
  # Impl items
  # ============================================================================
  # Macro Items
  # ============================================================================
  # Fn items
  # ============================================================================
  # Const items
  # ============================================================================
  # Static items
  # ============================================================================
  # Extern block items
  # ============================================================================
  # Macros
  # ============================================================================


  # Visibility
  # ============================================================================
  visibility:
    - match: '({{kw_pub}})\s*(\()'
      captures:
        1: keyword.rust
        2: punctuation.definition.group.begin.rust
      push:
        - include: comments
        - match: '\)'
          scope: punctuation.definition.group.end.rust
          pop: true
        - match: '{{kw_in}}'
          scope: keyword.operator.word.rust
        - match: '({{kw_crate}}|{{kw_self}}|{{kw_super}})'
          scope: keyword.other.rust
        - match: '::'
          scope: meta.path.rust
        - match: '{{identifier}}'
          scope: meta.path.rust
    - match: '{{kw_pub}}|{{kw_crate}}'
      scope: keyword.rust

  # Attributes
  # ============================================================================
  # Paths
  # ============================================================================
  # Syntax
  # SimplePath :
  #    ::? SimplePathSegment (:: SimplePathSegment)*
  simple-path:
    - match: '::'
      scope: punctuation.accessor.path.rust
    # SimplePathSegment :
    #    IDENTIFIER | super | self | crate | $crate
    - match: '{{kw_super}}|{{kw_self}}|{{kw_crate}}|\${{kw_crate}}'
      scope: keyword.other.path.rust
    - match: '{{upper_identifier}}'
      scope: entity.name.path.rust storage.type.rust
    - match: '{{camel_identifier}}'
      scope: entity.name.path.rust storage.type.rust
    - match: '{{identifier}}'
      scope: entity.name.path.rust


  # Syntax
  # PathInExpression :
  #    ::? PathExprSegment (:: PathExprSegment)*
  path-in-expression:
    - match: '::'
      scope: punctuation.accessor.path.rust
    # PathIdentSegment :
    #    IDENTIFIER | super | self | Self | crate | $crate
    - include: path-ident-segment
    # PathExprSegment :
    #    PathIdentSegment (:: GenericArgs)?
    - include: generic-args

  # GenericArgs :
  #       < >
  #    | < GenericArgsLifetimes ,? >
  #    | < GenericArgsTypes ,? >
  #    | < GenericArgsBindings ,? >
  #    | < GenericArgsTypes , GenericArgsBindings ,? >
  #    | < GenericArgsLifetimes , GenericArgsTypes ,? >
  #    | < GenericArgsLifetimes , GenericArgsBindings ,? >
  #    | < GenericArgsLifetimes , GenericArgsTypes , GenericArgsBindings ,? >
  generic-args:
    - match: '<'
      scope: punctuation.definition.generic.begin.rust
      push:
        - match: '>'
          scope: punctuation.definition.generic.end.rust
          pop: true
        - match: ','
          scope: punctuation.separator.rust
        # GenericArgsLifetimes :
        #    Lifetime (, Lifetime)*
        - match: '''{{identifier}}'
          scope: storage.type.lifetime.rust
        # GenericArgsBindings :
        #    GenericArgsBinding (, GenericArgsBinding)*
        - include: generic-args-binding
        # GenericArgsTypes :
        #    Type (, Type)*
        - include: type


  # GenericArgsBinding :
  #    IDENTIFIER = Type
  generic-args-binding:
    - match: '({{identifier}})\s*(=)'
      captures:
        1: storage.type.rust
        2: keyword.operator.assignment.rust
      push: type

  # Syntax
  # QualifiedPathInExpression :
  #    QualifiedPathType (:: PathExprSegment)+
  qualified-path-in-expression:
    # QualifiedPathType :
    #    < Type (as TypePath)? >
    - include: qualified-path-type
    - match: '::'
      scope: punctuation.accessor.path.rust
    - include: type-path

  # QualifiedPathInType :
  #    QualifiedPathType (:: TypePathSegment)+
  qualified-path-in-type:
    - include: qualified-path-type
    - match: '::'
      scope: punctuation.accessor.path.rust
    - include: type-path-segment

  qualified-path-type:
    - match: '<'
      scope: punctuation.definition.qualified-path.begin.rust
      push:
        - match: '>'
          scope: punctuation.definition.qualified-path.end.rust
          pop: true
        - match: '{{kw_as}}'
          scope: keyword.operator.word.rust
          push: type-path
        - include: type

  # Syntax
  # TypePath :
  #    ::? TypePathSegment (:: TypePathSegment)*
  type-path:
    - match: '::'
      scope: punctuation.accessor.path.rust
    - include: type-path-segment

  type-path-segment:
    # TypePathSegment :
    #    PathIdentSegment ::? (GenericArgs | TypePathFn)?
    - include: path-ident-segment
    - include: generic-args
    # TypePathFn :
    # ( TypePathFnInputs? ) (-> Type)?
    - match: '\('
      scope: punctuation.definition.group.begin.rust
      push:
        - match: '\)'
          scope: punctuation.definition.group.end.rust
          pop: true
        # TypePathFnInputs :
        # Type (, Type)* ,?
        - match: ','
          scope: punctuation.separator.rust
        - include: type
    - match: '->'
      scope: keyword.operator.rust
      push:
        - include: expect-type

  path-ident-segment:
    - match: '{{kw_super}}|{{kw_self}}|{{kw_Self}}|{{kw_crate}}|\${{kw_crate}}'
      scope: keyword.other.path.rust
    - match: '{{upper_identifier}}'
      scope: entity.name.path.rust storage.type.rust
    - match: '{{camel_identifier}}'
      scope: entity.name.path.rust storage.type.rust
    - match: '{{identifier}}'
      scope: entity.name.path.rust

  # Types
  # ============================================================================
  # Syntax
  # Type :
  #       TypeNoBounds
  #    | ImplTraitType
  #    | TraitObjectType
  expect-type:
    - include: type
    - match: '(?=\S)'
      pop: true
  type:
    - include: type-no-bounds

  # TypeNoBounds :
  #       ParenthesizedType
  #    | ImplTraitTypeOneBound
  #    | TraitObjectTypeOneBound
  #    | TypePath
  #    | TupleType
  #    | NeverType
  #    | RawPointerType
  #    | ReferenceType
  #    | ArrayType
  #    | SliceType
  #    | InferredType
  #    | QualifiedPathInType
  #    | BareFunctionType
  #    | MacroInvocation
  expect-type-no-bounds:
    - include: type-no-bounds
    - match: '(?=\S)'
      pop: true
  type-no-bounds:
    # RawPointerType
    - match: '(\*)({{kw_mut}}|{{kw_const}})'
      captures:
        1: keyword.operator.rust
        2: keyword.rust
      push:
        - include: expect-type-no-bounds
    # ReferenceType
    - match: '&'
      scope: keyword.operator.rust
      push:
        - include: lifetime
        - match: '{{kw_mut}}'
          scope: keyword.rust
        - include: expect-type-no-bounds
    # ArrayType
    # SliceType
    - match: '\['
      scope: punctuation.definition.array.begin.rust
      push:
        - include: type
        - match: '\]'
          scope: punctuation.definition.array.end.rust
          pop: true
        - match: ';'
          scope: punctuation.separator.array.rust
          set:
            - include: expression
            - match: '\]'
              scope: punctuation.definition.array.end.rust
              pop: true
            - match: '(?=\S)' # Recover from errors.
              pop: true
        - match: '(?=\S)' # Recover from errors.
          pop: true
    # NeverType
    - match: '!'
      scope: storage.type.never.rust
    # InferredType
    - match: '_'
      scope: storage.type.inferred.rust
    # TupleType
    - match: '\(\)'
      scope: storage.type.unit.rust
    # ParenthesizedType
    - match: '\('
      scope: punctuation.definition.group.begin.rust
      push:
        - match: '\)'
          scope: punctuation.definition.group.end.rust
          pop: true
        - match: ',' # Part of TupleType.
          scope: punctuation.separator.rust
        - include: type

    # ImplTraitTypeOneBound
    - match: '{{kw_impl}}'
      scope: keyword.rust
      push:
        - include: expect-trait-bound
    # InmplTraitObjectTypeOneBound
    - match: '{{kw_dyn}}'
      scope: keyword.rust
      push:
        - include: expect-type-param-bounds
    # TypePath
    - include: type-path
    # QualifiedPathInType
    - include: qualified-path-in-type


  # TypeParamBounds :
  #    TypeParamBound ( + TypeParamBound )* +?
  expect-type-param-bounds:
    - include: type-param-bounds
    - match: '(?=\S)'
      pop: true
  type-param-bounds:
    # TypeParamBound :
    #       Lifetime | TraitBound
    - include: lifetime
    - include: trait-bound
    - match: '\+'
      scope: keyword.operator.rust


  # TraitBound :
  #       ?? ForLifetimes? TypePath
  #    | ( ?? ForLifetimes? TypePath )
  expect-trait-bound:
    - include: trait-bound
    - match: '(?=\S)'
      pop: true
  trait-bound:
    - match: '\('
      scope: punctuation.definition.group.begin.rust
      push:
        - match: '\)'
          scope: punctuation.definition.group.end.rust
          pop: true
        - include: trait-bound-inner
    - include: trait-bound-inner


  trait-bound-inner:
    - match: '\?'
      scope: keyword.operator.rust
    - match: '{{kw_for}}'
      scope: keyword.rust
      push:
        - match: '<'
          scope: punctuation.definition.for-lifetimes.begin.rust
          push:
            - match: '>'
              scope: punctuation.definition.for-lifetimes.end.rust
              pop: true
            - match: ','
              scope: punctuation.separator.rust
            - include: lifetime
    - include: type-path


  # LifetimeBounds :
  #    ( Lifetime + )* Lifetime?
  lifetime-bounds:
    - include: lifetime
    - match: '\+'
      scope: keyword.operator.rust
    - match: '(?=\S)'
      pop: true

  # Lifetime :
  #       LIFETIME_OR_LABEL
  #    | 'static
  #    | '_
  lifetime:
    - match: '('')({{kw_static}})'
      captures:
        1: punctuation.other.lifetime.rust
        2: keyword.rust
    - match: '('')(_)'
      captures:
        1: punctuation.other.lifetime.rust
        2: storage.type.lifetime.rust
    - match: '('')({{identifier}})'
      captures:
        1: punctuation.other.lifetime.rust
        2: storage.type.lifetime.rust

  # Generics
  # ============================================================================
  # Patterns
  # ============================================================================


  # Strings
  # ============================================================================
  strings:
    - include: byte-string
    - include: raw-byte-string
    - include: string
    - include: raw-string

  chars:
    - include: char
    - include: byte

  byte:
    - match: '(b)('')'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.rust
        # ASCII except ', \, \n, \r or \t
        - match: '[\x00-\x08\x0b-\x0c\x0e-\x26\x28-\x5b\x5d-\x7f]'
          set: byte-tail
        # Don't mark entire file invalid while writing, even though this is
        # not valid syntax.
        - match: '\n'
          pop: true
        - match: '{{escaped_byte}}'
          scope: constant.character.escape.rust
          set: byte-tail
        - match: ''
          set: byte-tail

  byte-tail:
    - match: "'"
      scope: string.quoted.single.rust punctuation.definition.string.end.rust
      pop: true
    - match: '\n'
      pop: true
    - match: '.'
      scope: invalid.illegal.byte.rust

  char:
    - match: "'"
      scope: punctuation.definition.string.begin.rust
      push:
        - meta_scope: string.quoted.single.rust
        - match: "[^'\\\\\n\r\t]"
          set: char-tail
        # Don't mark entire file invalid while writing, even though this is
        # not valid syntax.
        - match: '\n'
          pop: true
        - match: '{{escaped_char}}'
          scope: constant.character.escape.rust
          set: char-tail
        - match: ''
          set: char-tail

  char-tail:
    - match: "'"
      scope: string.quoted.single.rust punctuation.definition.string.end.rust
      pop: true
    - match: '\n'
      pop: true
    - match: '.'
      scope: invalid.illegal.char.rust

  escaped-char:
    - match: '{{escaped_char}}'
      scope: constant.character.escape.rust
    - match: '\\u\{[^}]*\}'
      scope: invalid.illegal.character.escape.rust
    - match: '\\.'
      scope: invalid.illegal.character.escape.rust


  byte-string:
    - match: '(b)(")'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.rust
        - match: '"'
          scope: punctuation.definition.string.end.rust
          pop: true
        - match: '{{escaped_byte}}'
          scope: constant.character.escape.rust
        - match: '\\.'
          scope: invalid.illegal.character.escape.rust

  raw-byte-string:
    - match: '(br)(#*)(")'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
        3: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.rust
        - match: '"\2'
          scope: punctuation.definition.string.end.rust
          pop: true

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.rust
        - match: '"'
          scope: punctuation.definition.string.end.rust
          pop: true
        - include: escaped-char

  raw-string:
    - match: (r)(#*)(")
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
        3: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.rust
        - match: '"\2'
          scope: punctuation.definition.string.end.rust
          pop: true

  # Format strings
  # ============================================================================
  format-strings:
    - include: format-string
    - include: format-raw-string

  format-string:
    - match: '"'
      scope: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.rust
        - match: '"'
          scope: punctuation.definition.string.end.rust
          pop: true
        - include: escaped-char
        - include: format-escapes

  format-raw-string:
    - match: '(r)(#*)"'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.rust
        - match: '"\2'
          scope: punctuation.definition.string.end.rust
          pop: true
        - include: format-escapes

  format-escapes:
    - match: '\{\{|\}\}'
      scope: constant.character.escape.rust
    - match: '|-
        (?x)                      # Spec from http://doc.rust-lang.org/std/fmt/
        \{
          (\d+|{{identifier}})?
          (
            :                     # format_spec delimiter
            (.?[<>^])?            # [[fill]align]
            [+-]?                 # [sign]
            \#?                   # [#]
            0?                    # [0]
            (\d+\$?)?             # [width]
            (\.(\d+\$?|\*)?)?     # [. precision]
            (\?|{{identifier}})?  # [type]
          )?
        \}'
      scope: constant.other.placeholder.rust

  # Numbers
  # ============================================================================
  numbers:
    - match: '\b({{dec_literal}}(?:\.{{dec_literal}})?(?:{{float_exponent}})?)({{float_suffixes}})'
      captures:
        1: constant.numeric.float.rust
        2: storage.type.numeric.rust
    - match: '\b{{dec_literal}}\.{{dec_literal}}(?:{{float_exponent}})?'
      scope: constant.numeric.float.rust
    - match: '\b{{dec_literal}}{{float_exponent}}'
      scope: constant.numeric.float.rust
    - match: '\b{{dec_literal}}\.(?![A-Za-z._''])'
      scope: constant.numeric.float.rust

    - match: '\b({{dec_literal}})({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.decimal.rust
        2: storage.type.numeric.rust
    - match: '\b(0x[\h_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.hexadecimal.rust
        2: storage.type.numeric.rust
    - match: '\b(0o[0-7_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.octal.rust
        2: storage.type.numeric.rust
    - match: '\b(0b[0-1_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.binary.rust
        2: storage.type.numeric.rust
    # Check for invalid octal and binary sequences that didn't match above.
    - match: '\b(0(:?x|o|b)[0-9A-Za-z_]+)({{int_suffixes}})?\b'
      captures:
        1: invalid.illegal.character.numeric.rust
        3: storage.type.numeric.rust

  # Comments
  # ============================================================================
  comment_custom_tags:
    - match: '(TODO):'
      captures:
        1: comment.tag.rust

  comments:
    - include: any_line_comment
    - include: any_block_comment


  any_line_comment:
    - include: inner_line_documentation_comment
    - include: outer_line_documentation_comment
    - include: line_comment

  line_comment:
    - match: '//'
      scope: punctuation.definition.comment.rust
      push:
        - meta_scope: comment.line.rust
        - include: comment_custom_tags
        - match: $\n?
          pop: true

  inner_line_documentation_comment:
    - match: '//!'
      scope: punctuation.definition.comment.documentation.inner.rust
      push:
        - meta_scope: comment.line.documentation.inner.rust
        - include: comment_custom_tags
        - match: $\n?
          pop: true

  outer_line_documentation_comment:
    - match: '///'
      scope: punctuation.definition.comment.documentation.outer.rust
      push:
        - meta_scope: comment.line.documentation.outer.rust
        - include: comment_custom_tags
        - match: $\n?
          pop: true

  any_block_comment:
    - include: inner_block_documentation_comment
    - include: outer_block_documentation_comment
    - include: block_comment

  block_comment:
    - match: '/\*'
      scope: punctuation.definition.comment.begin.rust
      push:
        - meta_scope: comment.block.rust
        - include: any_block_comment # Block comments can nest
        - include: comment_custom_tags
        - match: '\*/'
          scope: punctuation.definition.comment.end.rust
          pop: true

  inner_block_documentation_comment:
    - match: '/\*!'
      scope: punctuation.definition.comment.documentation.inner.begin.rust
      push:
        - meta_scope: comment.block.documentation.inner.rust
        - include: any_block_comment # Block comments can nest
        - include: comment_custom_tags
        - match: '\*/'
          scope: punctuation.definition.comment.documentation.inner.end.rust
          pop: true

  outer_block_documentation_comment:
    - match: '/\*\*'
      scope: punctuation.definition.comment.documentation.outer.begin.rust
      push:
        - meta_scope: comment.block.documentation.outer.rust
        - include: any_block_comment # Block comments can nest
        - include: comment_custom_tags
        - match: '\*/'
          scope: punctuation.definition.comment.documentation.outer.end.rust
          pop: true

  operators:
    - match: '(\.\.\.|\.\.|\.\.=|\*|&)'
      scope: keyword.operator.rust

    - match: '{{kw_as}}|{{kw_await}}'
      scope: keyword.operator.word.rust

    - match: '(\+|\+=|-|-=|\*|\*=|/|/=|%|%=)'
      scope: keyword.operator.arithmetic.rust

    - match: '(&|&=|\||\|=|\^|\^=|!|!=)'
      scope: keyword.operator.boolean.rust

    - match: '(!|==|!=|>|>=|<|<=|&&|\|\|)'
      scope: keyword.operator.logical.rust

    - match: '='
      scope: keyword.operator.assignment.rust

    - match: '(=>|->|:|@)'
      scope: punctuation.rust

    - match: '(\.|::)'
      scope: punctuation.accessor.rust

    - match: ','
      scope: punctuation.separator.rust

    - match: ';'
      scope: punctuation.terminator.rust

    - match: '\\'
      scope: punctuation.separator.continuation.rust

  keywords:
    - match: '(?x)
        {{kw_abstract}}|
        {{kw_become}}|
        {{kw_box}}|
        {{kw_do}}|
        {{kw_final}}|
        {{kw_macro}}|
        {{kw_override}}|
        {{kw_priv}}|
        {{kw_try}}|
        {{kw_typeof}}|
        {{kw_unsized}}|
        {{kw_virtual}}|
        {{kw_yield}}'
      scope: invalid.illegal.keyword.rust

    - match: '(?x)
        {{kw_async}}|
        {{kw_const}}|
        {{kw_enum}}|
        {{kw_extern}}|
        {{kw_fn}}|
        {{kw_impl}}|
        {{kw_let}}|
        {{kw_mod}}|
        {{kw_move}}|
        {{kw_mut}}|
        {{kw_pub}}|
        {{kw_ref}}|
        {{kw_static}}|
        {{kw_struct}}|
        {{kw_trait}}|
        {{kw_type}}|
        {{kw_union}}|
        {{kw_unsafe}}|
        {{kw_use}}|
        {{kw_where}}'
      scope: keyword.rust

    - match: '(?x)
        {{kw_break}}|
        {{kw_continue}}|
        {{kw_for}}|
        {{kw_in}}|
        {{kw_loop}}|
        {{kw_match}}|
        {{kw_return}}|
        {{kw_while}}'
      scope: keyword.control.rust

    - match: '{{kw_else}}|{{kw_if}}'
      scope: keyword.control.conditional.rust

    - match: '{{kw_self}}|{{kw_super}}|{{kw_crate}}'
      scope: keyword.other.rust

    - match: '{{kw_Self}}|{{kw_dyn}}'
      scope: storage.type.rust

    - match: '{{kw_true}}|{{kw_false}}'
      scope: constant.language.rust

