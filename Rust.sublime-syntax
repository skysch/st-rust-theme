%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Rust
file_extensions: rs
scope: source.rust

variables:
  identifier: '(?:(?:r\#)?{{non_raw_identifier}})'
  camel_identifier: '\b_*[A-Z][a-zA-Z0-9_]*[a-z][a-zA-Z0-9_]*\b'
  upper_identifier: '\b_*[A-Z][a-zA-Z0-9_]*\b'
  non_raw_identifier: '[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+'
  lifetime: '''(?:_|{{non_raw_identifier}})(?!\'')\b'

  escaped_byte: '\\([nrt0\"''\\]|x\h{2})'
  escaped_char: '\\([nrt0\"''\\]|x[0-7]\h|u\{(?:\h_*){1,6}\})'

  int_suffixes: '[iu](?:8|16|32|64|128|size)'
  dec_literal: '[0-9](?:[0-9_])*'
  float_suffixes: 'f(32|64)'
  float_exponent: '[eE][+-]?[0-9_]*[0-9][0-9_]*'

  abstract: '\b(?<!r\#)abstract\b'
  as: '\b(?<!r\#)as\b'
  async: '\b(?<!r\#)async\b'
  await: '\b(?<!r\#)await\b'
  become: '\b(?<!r\#)become\b'
  box: '\b(?<!r\#)box\b'
  break: '\b(?<!r\#)break\b'
  const: '\b(?<!r\#)const\b'
  continue: '\b(?<!r\#)continue\b'
  crate: '\b(?<!r\#)crate\b'
  do: '\b(?<!r\#)do\b'
  dyn: '\b(?<!r\#)dyn\b'
  else: '\b(?<!r\#)else\b'
  enum: '\b(?<!r\#)enum\b'
  extern: '\b(?<!r\#)extern\b'
  false: '\b(?<!r\#)false\b'
  final: '\b(?<!r\#)final\b'
  fn: '\b(?<!r\#)fn\b'
  for: '\b(?<!r\#)for\b'
  if: '\b(?<!r\#)if\b'
  impl: '\b(?<!r\#)impl\b'
  in: '\b(?<!r\#)in\b'
  let: '\b(?<!r\#)let\b'
  loop: '\b(?<!r\#)loop\b'
  macro: '\b(?<!r\#)macro\b'
  match: '\b(?<!r\#)match\b'
  mod: '\b(?<!r\#)mod\b'
  move: '\b(?<!r\#)move\b'
  mut: '\b(?<!r\#)mut\b'
  override: '\b(?<!r\#)override\b'
  priv: '\b(?<!r\#)priv\b'
  pub: '\b(?<!r\#)pub\b'
  ref: '\b(?<!r\#)ref\b'
  return: '\b(?<!r\#)return\b'
  self: '\b(?<!r\#)self\b'
  Self: '\b(?<!r\#)Self\b'
  static: '\b(?<!r\#)static\b'
  struct: '\b(?<!r\#)struct\b'
  super: '\b(?<!r\#)super\b'
  trait: '\b(?<!r\#)trait\b'
  true: '\b(?<!r\#)true\b'
  try: '\b(?<!r\#)try\b'
  type: '\b(?<!r\#)type\b'
  typeof: '\b(?<!r\#)typeof\b'
  union: '\b(?<!r\#)use\b'
  unsafe: '\b(?<!r\#)unsafe\b'
  unsized: '\b(?<!r\#)unsized\b'
  use: '\b(?<!r\#)use\b'
  virtual: '\b(?<!r\#)virtual\b'
  where: '\b(?<!r\#)where\b'
  while: '\b(?<!r\#)while\b'
  yield: '\b(?<!r\#)yield\b'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    # Comments are allowed everywhere.
    - include: comments
    # Macro variables are allowed everywhere.
    - match: '\${{identifier}}'
      scope: variable.other.rust

  main:
    - include: statements

  keywords:
    - match: '(?x)
        {{abstract}}|
        {{become}}|
        {{box}}|
        {{do}}|
        {{final}}|
        {{macro}}|
        {{override}}|
        {{priv}}|
        {{try}}|
        {{typeof}}|
        {{unsized}}|
        {{virtual}}|
        {{yield}}'
      scope: invalid.illegal.rust

    - match: '(?x)
        {{async}}|
        {{const}}|
        {{enum}}|
        {{extern}}|
        {{fn}}|
        {{impl}}|
        {{let}}|
        {{mod}}|
        {{move}}|
        {{mut}}|
        {{pub}}|
        {{ref}}|
        {{static}}|
        {{struct}}|
        {{trait}}|
        {{type}}|
        {{union}}|
        {{unsafe}}|
        {{use}}|
        {{where}}'
      scope: keyword.declaration.rust

    - match: '(?x)
        {{break}}|
        {{continue}}|
        {{for}}|
        {{in}}|
        {{loop}}|
        {{match}}|
        {{return}}|
        {{while}}'
      scope: keyword.control.rust

    - match: '{{else}}|{{if}}'
      scope: keyword.control.conditional.rust

    - match: '(\.\.\.|\.\.|\.\.=|\*|&)'
      scope: keyword.operator.rust

    - match: '{{as}}|{{await}}'
      scope: keyword.operator.word.rust

    - match: '(\+|\+=|-|-=|\*|\*=|/|/=|%|%=)'
      scope: keyword.operator.arithmetic.rust

    - match: '(&|&=|\||\|=|\^|\^=|!|!=)'
      scope: keyword.operator.boolean.rust

    - match: '(!|==|!=|>|>=|<|<=|&&|\|\|)'
      scope: keyword.operator.logical.rust

    - match: '='
      scope: keyword.operator.assignment.rust

    - match: '{{self}}|{{super}}|{{crate}}'
      scope: keyword.other.rust

    - match: '{{Self}}|{{dyn}}'
      scope: storage.type.rust

    - match: '{{true}}|{{false}}'
      scope: constant.language.rust

    - match: '(=>|->|:|@)'
      scope: punctuation.rust

    - match: '(\.|::)'
      scope: punctuation.accessor.rust

    - match: ','
      scope: punctuation.separator.rust

    - match: ';'
      scope: punctuation.terminator.rust

    - match: '\\'
      scope: punctuation.separator.continuation.rust




  # Items
  # ============================================================================
  statements:
    - include: items

    - match: '(('')(?:{{non_raw_identifier}}))\s*(:)'
      captures:
        1: entity.name.label.rust
        2: punctuation.other.rust
        3: punctuation.separator.rust

    - include: expressions

  items:
    - include: attributes
    - include: visibility
    - match: '{{mod}}'
      scope: keyword.declaration.rust
      set: mod-item
    - match: '{{extern}}\s+{{crate}}\b'
      scope: keyword.declaration.rust
      set: crate-item
    - match: '{{use}}'
      scope: keyword.declaration.rust
      set: use-item
    - match: '{{type}}'
      scope: keyword.declaration.rust
      set: type-item
    - match: '{{struct}}'
      scope: keyword.declaration.rust
      set: struct-item
    - match: '{{enum}}'
      scope: keyword.declaration.rust
      set: enum-item
    - match: '{{union}}'
      scope: keyword.declaration.rust
      set: union-item
    - match: '({{const}})\s+(?!{{fn}})(:?({{identifier}})|(_))\b'
      captures:
        1: keyword.declaration.rust
        3: entity.name.rust
        4: keyword.operator.implicit.rust
      set:
        - match: ':'
          scope: keyword.operator.assignment.rust
          set:
            - include: type
            - match: '='
              scope: keyword.operator.assignment.rust
              set:
                - include: expressions
                - match: ';'
                  scope: punctuation.terminator.rust
                  set: statements
    - match: '{{static}}'
      scope: keyword.declaration.rust
      set: static-item
    - match: '({{unsafe}})?({{trait}})'
      captures:
        1: keyword.declaration.rust
        2: keyword.declaration.rust
      set:
        - include: trait-item
    - include: fn-item


  visibility:
    - match: '({{pub}})\s*(\()'
      captures:
        1: storage.modifier.rust keyword.declaration.rust
        2: punctuation.definition.group.begin.rust
      push:
        - include: comments
        - match: '\)'
          scope: punctuation.definition.group.end.rust
          pop: true
        - match: '{{in}}'
          scope: keyword.operator.word.rust
        - match: '({{crate}}|{{self}}|{{super}})'
          scope: keyword.other.rust
        - match: '::'
          scope: meta.path.rust
        - match: '{{identifier}}'
          scope: meta.path.rust
    - match: '{{pub}}|{{crate}}'
      scope: storage.modifier.rust keyword.declaration.rust

  mod-item:
    - match: '({{identifier}})\s*(;)'
      captures:
        1: meta.mod.rust entity.name.rust
        2: meta.mod.rust punctuation.terminator.rust
      set: statements
    - match: '{{identifier}}'
      scope: meta.mod.rust entity.name.rust
      push: statement-block

  crate-item:
    - match: '{{as}}'
      scope: keyword.operator.word.rust
    - match: '{{identifier}}'
      scope: entity.name.rust
    - match: ';'
      scope: punctuation.terminator.rust
      set: statements

  use-item:
    - include: use-path
    # The top-most bracket is not a use-group because we must return to
    # statement parsing afterward.
    - match: '\{'
      scope: punctuation.section.use-group.begin.rust
      set:
        - match: '(\})\s*(;)?' # Highlight invalid bracket-semicolon
          captures:
            1: punctuation.section.use-group.end.rust
            2: invalid.illegal.rust
          set: statements
        - include: use-group
    - match: ';'
      scope: punctuation.terminator.rust
      set: statements

  use-group:
    - match: '\{'
      scope: punctuation.section.use-group.begin.rust
      push: use-group
    - match: '\}'
      scope: punctuation.section.use-group.end.rust
      pop: true
    - include: use-path

  use-path:
    - match: '{{as}}'
      scope: keyword.operator.word.rust
    - match: '\*'
      scope: keyword.operator.glob.rust
    - match: '\b_\b'
      scope: keyword.operator.implicit.rust
    - match: ','
      scope: punctuation.separator.rust
    - include: simple-path


  fn-item:
    - match: '{{async}}|{{const}}'
      scope: keyword.declaration.rust
      set:
        - match: '{{unsafe}}'
          scope: keyword.declaration.rust
        - match: '{{extern}}'
          scope: keyword.declaration.rust
          set:
            - include: string
            - include: raw-string
            - include: fn-item-definition
        - include: fn-item-definition
    - match: '{{unsafe}}'
      scope: keyword.declaration.rust
    - match: '{{extern}}'
      scope: keyword.declaration.rust
      set:
        - include: string
        - include: raw-string
        - include: fn-item-definition
    - include: fn-item-definition

  fn-item-definition:
    - match: '{{fn}}'
      scope: keyword.declaration.rust
      set:
        - match: '\b{{identifier}}\b'
          scope: entity.name.function.rust
          set:
            - include: generics
            - match: '\('
              scope: punctuation.section.fn-parameters.begin.rust
              push:
                - include: fn-parameter
                - match: ','
                  scope: punctuation.separator.rust
                - match: '\)'
                  scope: punctuation.section.fn-parameters.end.rust
                  pop: true
            - match: '->'
              scope: keyword.operator.rust
              set:
                - include: where-clause
                - include: type
                - include: statement-block
            - include: where-clause
            - include: statement-block
            - match: ';'
              scope: punctuation.terminator.rust
              set: statements

  fn-parameter:
    - match: '{{self}}'
      scope: keyword.other.rust
    - match: '({{identifier}})\s*(:)\s*'
      captures:
        1: entity.name.rust
        2: punctuation.separator.rust
    # include: pattern
    - include: type


  type-item:
    - match: '{{identifier}}'
      scope: storage.type.type.rust
      set:
        - include: where-clause
        - include: generics
        - match: '='
          scope: keyword.operator.assignment.rust
        - include: type
        - match: ';'
          scope: punctuation.terminator.rust
          set: statements

  struct-item:
    - match: '{{identifier}}'
      scope: storage.type.struct.rust
    - include: generics
    - include: where-clause
    - match: '\('
      scope: punctuation.section.struct-parameters.begin.rust
      set:
        - include: tuple-struct-fields
        - match: '\)'
          scope: punctuation.section.struct-parameters.end.rust
          set:
            - include: where-clause
            - match: ';'
              scope: punctuation.terminator.rust
              set: statements
    - match: '\{'
      scope: punctuation.section.struct-parameters.begin.rust
      set:
        - include: struct-struct-fields
        - match: '(\})\s*(;)?' # Highlight invalid bracket-semicolon
          captures:
            1: punctuation.section.struct-parameters.end.rust
            2: invalid.illegal.rust
          set: statements
    - match: ';'
      scope: punctuation.terminator.rust
      set: statements

  enum-item:
    - match: '{{identifier}}'
      scope: storage.type.struct.rust
    - include: generics
    - include: where-clause
    - match: '\{'
      scope: punctuation.section.struct-parameters.begin.rust
      set:
        - include: outer-attribute
        - include: visibility
        - include: struct-struct-fields
        - match: ','
          scope: punctuation.separator.rust
        - match: '{{identifier}}'
          scope: storage.type.struct.rust
        - match: '='
          scope: keyword.operator.assignment.rust
          push:
            - include: expressions
            - match: ','
              scope: punctuation.separator.rust
              pop: true
            - match: '\}'
              scope: punctuation.section.struct-parameters.end.rust
              set: statements
        - match: '\('
          scope: punctuation.section.struct-parameters.begin.rust
          push:
            - include: tuple-struct-fields
            - match: '\)'
              scope: punctuation.section.struct-parameters.end.rust
              pop: true
        - match: '\{'
          scope: punctuation.section.struct-parameters.begin.rust
          push:
            - include: struct-struct-fields
            - match: '\}'
              scope: punctuation.section.struct-parameters.end.rust
              pop: true
        - match: '(\})\s*(;)?' # Highlight invalid bracket-semicolon
          captures:
            1: punctuation.section.struct-parameters.end.rust
            2: invalid.illegal.rust
          set: statements
    - match: ';'
      scope: punctuation.terminator.rust
      set: statements

  union-item:
    - match: '{{identifier}}'
      scope: storage.type.struct.rust
    - include: generics
    - include: where-clause
    - match: '\{'
      scope: punctuation.section.struct-parameters.begin.rust
      set:
        - include: struct-struct-fields
        - match: '(\})\s*(;)?' # Highlight invalid bracket-semicolon
          captures:
            1: punctuation.section.struct-parameters.end.rust
            2: invalid.illegal.rust
          set: statements
    - match: ';'
      scope: punctuation.terminator.rust
      set: statements

  tuple-struct-fields:
    - match: ','
      scope: punctuation.separator.rust
    - include: outer-attribute
    - include: visibility
    - include: type

  struct-struct-fields:
    - match: ','
      scope: punctuation.separator.rust
    - include: outer-attribute
    - include: visibility
    - match: '([0-9]+|{{identifier}})\s*(:)\s*'
      captures:
        1: entity.name.rust
        2: punctuation.separator.rust
    - include: type

  static-item:
    - match: '{{mut}}'
      scope: keyword.declaration.rust
    - match: '\b{{identifier}}\b'
      scope: entity.name.static.rust
      set:
        - match: ':'
          scope: keyword.operator.assignment.rust
          set:
            - include: type
            - match: '='
              scope: keyword.operator.assignment.rust
              set:
                - include: expressions
                - match: ';'
                  scope: punctuation.terminator.rust
                  set: statements
  trait-item:
    - match: '\b{{identifier}}\b'
      scope: storage.type.trait.rust
      set:
        - include: generics
        - match: ':'
          scope: keyword.operator.assignment.rust
          set:
            - include: where-clause
            - include: trait-block
        - include: trait-block
    - include: trait-block

  trait-block:
    - match: '\{'
      scope: punctuation.section.trait-block.begin.rust
      push:
        - include: trait-block-items
        - match: '(\})\s*(;)?' # Highlight invalid bracket-semicolon
          captures:
            1: punctuation.section.trait-block.end.rust
            2: invalid.illegal.rust
          set: statements

  trait-block-items:
    - include: outer-attribute
    - include: visibility
    - match: '{{type}}'
      scope: keyword.declaration.rust
      set:
        - match: '\b{{identifier}}\b'
          scope: storage.type.type.rust
          set:
            - match: ':'
              scope: keyword.operator.assignment.rust
              set:
                - include: type-bounds
                - match: ';'
                  scope: punctuation.terminator.rust
                  set: trait-block-items
            - match: ';'
              scope: punctuation.terminator.rust
              set: trait-block-items
    - match: '({{const}})\s+(?!{{fn}})(:?({{identifier}})|(_))\b'
      captures:
        1: keyword.declaration.rust
        3: entity.name.rust
        4: keyword.operator.implicit.rust
      set:
        - match: ':'
          scope: keyword.operator.assignment.rust
          set:
            - include: type
            - match: '='
              scope: keyword.operator.assignment.rust
              set:
                - include: expressions
                - match: ';'
                  scope: punctuation.terminator.rust
                  set: trait-block-items
    - include: trait-block-fn-item

  trait-block-fn-item:
    - match: '{{async}}|{{const}}'
      scope: keyword.declaration.rust
      set:
        - match: '{{unsafe}}'
          scope: keyword.declaration.rust
        - match: '{{extern}}'
          scope: keyword.declaration.rust
          set:
            - include: string
            - include: raw-string
            - include: trait-block-fn-item-definition
        - include: trait-block-fn-item-definition
    - match: '{{unsafe}}'
      scope: keyword.declaration.rust
    - match: '{{extern}}'
      scope: keyword.declaration.rust
      set:
        - include: string
        - include: raw-string
        - include: trait-block-fn-item-definition
    - include: trait-block-fn-item-definition

  trait-block-fn-item-definition:
    - match: '{{fn}}'
      scope: keyword.declaration.rust
      set:
        - match: '\b{{identifier}}\b'
          scope: entity.name.function.rust
          set:
            - include: generics
            - match: '\('
              scope: punctuation.section.fn-parameters.begin.rust
              push:
                - include: fn-parameter
                - match: ','
                  scope: punctuation.separator.rust
                - match: '\)'
                  scope: punctuation.section.fn-parameters.end.rust
                  pop: true
            - match: '->'
              scope: keyword.operator.rust
              set:
                - include: where-clause
                - include: type
                - include: statement-block
            - include: where-clause
            - include: statement-block
            - match: ';'
              scope: punctuation.terminator.rust
              set: trait-block-items



  # impl-item
  # extern-block-item




  # Expressions
  # ============================================================================
  expressions:
    - include: strings
    - include: format-strings
    - include: chars
    - include: numbers
    - include: statement-block

  statement-block:
    - match: '\{'
      scope: punctuation.section.statement-block.begin.rust
      push:
        - match: '(\})\s*(;)?' # Highlight invalid bracket-semicolon
          captures:
            1: punctuation.section.statement-block.end.rust
            2: invalid.illegal.rust
        - include: statements

  # closures
  # fn-invocation
  # method-invocation
  # macro-invocation

  # Patterns
  # ============================================================================

  # Types
  # ============================================================================
  generics:
    - match: '<'
      scope: punctuation.section.generic-parameters.begin.rust
      push:
        - include: type
        - match: ','
          scope: punctuation.separator.rust
        - match: '>'
          scope: punctuation.section.generic-parameters.end.rust
          pop: true

  where-clause:
    - match: '{{where}}'
      scope: keyword.declaration.rust
    - include: type
    - match: ':|\+'
      scope: keyword.operator.rust


  lifetime:
    - match: '{{lifetime}}'
      scope: storage.type.lifetime.rust

  type:
    - include: type-common
    - include: lifetime

  # type-for-param:
  # type-no-plus:
  # type-return:
  type-common:
    - match: '_'
      scope: storage.type.inferred.rust
    - match: '!'
      scope: storage.type.never.rust
    - match: '\(\)'
      scope: storage.type.unit.rust
    - match: '\*'
      scope: storage.type.pointer.rust keyword.operator.rust
    - match: '\&'
      scope: storage.type.reference.rust keyword.operator.rust
    - match: '({{ref}}|{{mut}})'
      scope: keyword.rust
    - match: '\['
      scope: punctuation.section.brackets.begin.rust
      push:
        - meta_scope: meta.brackets storage.type.array.rust
        - include: type-common
        - include: punctuation
        - match: '\]'
          scope: punctuation.section.brackets.end.rust
          pop: true
    - include: higher-rank-type-bound
    - match: '{{impl}}'
      scope: storage.type.impl.rust
    - include: path-in-type
    - match: '<'
      scope: punctuation.section.generic-parameters.begin.rust
      push:
        - include: type
        - match: ','
          scope: punctuation.separator.rust
        - match: '>'
          scope: punctuation.section.generic-parameters.end.rust
          pop: true
    - match: '({{camel_identifier}}||{{upper_identifier}})(::)'
      captures:
        1: storage.type.rust
        2: punctuation.accessor.rust
    - match: '({{identifier}})(::)'
      captures:
        1: entity.name.rust
        2: punctuation.accessor.rust
    - match: '{{identifier}}'
      scope: storage.type.rust


  type-bounds:
    - include: higher-rank-type-bound
    - include: type
    - include: lifetime
    - match: '\+'
      scope: keyword.operator.rust
    - match: '\?'
      scope: keyword.operator.rust

  higher-rank-type-bound:
    - match: '{{for}}'
      scope: storage.type.hrtb.rust

  # Paths
  # ============================================================================

  simple-path:
    - include: simple-path-segment
    - match: '::'
      scope: punctuation.accessor.rust

  simple-path-segment:
    - match: '({{super}}|{{self}}|{{crate}}|\b\$crate\b)'
      scope: keyword.other.rust
    - match: '{{upper_identifier}}'
      scope: entity.name.constant.rust
    - match: '{{camel_identifier}}'
      scope: entity.name.type.rust
    - match: '{{identifier}}'
      scope: entity.name.rust

  # Attributes
  # ============================================================================
  attributes:
    - include: inner-attribute
    - include: outer-attribute

  inner-attribute:
    - match: '#!\['
      scope: punctuation.definition.attribute.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: meta.annotation.rust
        - match: '\]'
          scope: punctuation.definition.attribute.end.rust
          pop: true

  outer-attribute:
    - match: '#\['
      scope: punctuation.definition.attribute.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: meta.annotation.rust
        - match: '\]'
          scope: punctuation.definition.attribute.end.rust
          pop: true

  # Macro rules
  # ============================================================================


  # Format strings
  # ============================================================================
  format-strings:
    - include: format-string
    - include: format-raw-string

  format-string:
    - match: '"'
      scope: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.rust
        - match: '"'
          scope: punctuation.definition.string.end.rust
          pop: true
        - include: escaped-char
        - include: format-escapes

  format-raw-string:
    - match: '(r)(#*)"'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.rust
        - match: '"\2'
          scope: punctuation.definition.string.end.rust
          pop: true
        - include: format-escapes

  format-escapes:
    - match: '\{\{|\}\}'
      scope: constant.character.escape.rust
    - match: '|-
        (?x)                      # Spec from http://doc.rust-lang.org/std/fmt/
        \{
          (\d+|{{identifier}})?
          (
            :                     # format_spec delimiter
            (.?[<>^])?            # [[fill]align]
            [+-]?                 # [sign]
            \#?                   # [#]
            0?                    # [0]
            (\d+\$?)?             # [width]
            (\.(\d+\$?|\*)?)?     # [. precision]
            (\?|{{identifier}})?  # [type]
          )?
        \}'
      scope: constant.other.placeholder.rust

  # Strings
  # ============================================================================
  strings:
    - include: byte-string
    - include: raw-byte-string
    - include: string
    - include: raw-string

  chars:
    - include: char
    - include: byte

  byte:
    - match: '(b)('')'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.rust
        # ASCII except ', \, \n, \r or \t
        - match: '[\x00-\x08\x0b-\x0c\x0e-\x26\x28-\x5b\x5d-\x7f]'
          set: byte-tail
        # Don't mark entire file invalid while writing, even though this is
        # not valid syntax.
        - match: '\n'
          pop: true
        - match: '{{escaped_byte}}'
          scope: constant.character.escape.rust
          set: byte-tail
        - match: ''
          set: byte-tail

  byte-tail:
    - match: "'"
      scope: string.quoted.single.rust punctuation.definition.string.end.rust
      pop: true
    - match: '\n'
      pop: true
    - match: '.'
      scope: invalid.illegal.byte.rust

  char:
    - match: "'"
      scope: punctuation.definition.string.begin.rust
      push:
        - meta_scope: string.quoted.single.rust
        - match: "[^'\\\\\n\r\t]"
          set: char-tail
        # Don't mark entire file invalid while writing, even though this is
        # not valid syntax.
        - match: '\n'
          pop: true
        - match: '{{escaped_char}}'
          scope: constant.character.escape.rust
          set: char-tail
        - match: ''
          set: char-tail

  char-tail:
    - match: "'"
      scope: string.quoted.single.rust punctuation.definition.string.end.rust
      pop: true
    - match: '\n'
      pop: true
    - match: '.'
      scope: invalid.illegal.char.rust

  escaped-char:
    - match: '{{escaped_char}}'
      scope: constant.character.escape.rust
    - match: '\\u\{[^}]*\}'
      scope: invalid.illegal.character.escape.rust
    - match: '\\.'
      scope: invalid.illegal.character.escape.rust


  byte-string:
    - match: '(b)(")'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.rust
        - match: '"'
          scope: punctuation.definition.string.end.rust
          pop: true
        - match: '{{escaped_byte}}'
          scope: constant.character.escape.rust
        - match: '\\.'
          scope: invalid.illegal.character.escape.rust

  raw-byte-string:
    - match: '(br)(#*)(")'
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
        3: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.rust
        - match: '"\2'
          scope: punctuation.definition.string.end.rust
          pop: true

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.rust
        - match: '"'
          scope: punctuation.definition.string.end.rust
          pop: true
        - include: escaped-char

  raw-string:
    - match: (r)(#*)(")
      captures:
        1: keyword.operator.string-prefix.rust
        2: punctuation.definition.string.begin.rust
        3: punctuation.definition.string.begin.rust
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.raw.rust
        - match: '"\2'
          scope: punctuation.definition.string.end.rust
          pop: true


  # Numbers
  # ============================================================================
  numbers:
    - match: '\b({{dec_literal}}(?:\.{{dec_literal}})?(?:{{float_exponent}})?)({{float_suffixes}})'
      captures:
        1: constant.numeric.float.rust
        2: storage.type.numeric.rust
    - match: '\b{{dec_literal}}\.{{dec_literal}}(?:{{float_exponent}})?'
      scope: constant.numeric.float.rust
    - match: '\b{{dec_literal}}{{float_exponent}}'
      scope: constant.numeric.float.rust
    - match: '\b{{dec_literal}}\.(?![A-Za-z._''])'
      scope: constant.numeric.float.rust

    - match: '\b({{dec_literal}})({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.decimal.rust
        2: storage.type.numeric.rust
    - match: '\b(0x[\h_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.hexadecimal.rust
        2: storage.type.numeric.rust
    - match: '\b(0o[0-7_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.octal.rust
        2: storage.type.numeric.rust
    - match: '\b(0b[0-1_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.integer.binary.rust
        2: storage.type.numeric.rust
    # Check for invalid octal and binary sequences that didn't match above.
    - match: '\b(0(:?x|o|b)[0-9A-Za-z_]+)({{int_suffixes}})?\b'
      captures:
        1: invalid.illegal.character.numeric.rust
        3: storage.type.numeric.rust

  # Comments
  # ============================================================================
  comment_custom_tags:
    - match: '(TODO):'
      captures:
        1: comment.tag.rust

  comments:
    - include: any_line_comment
    - include: any_block_comment


  any_line_comment:
    - include: inner_line_documentation_comment
    - include: outer_line_documentation_comment
    - include: line_comment

  line_comment:
    - match: '//'
      scope: punctuation.definition.comment.rust
      push:
        - meta_scope: comment.line.rust
        - match: $\n?
          pop: true

  inner_line_documentation_comment:
    - match: '//!'
      scope: punctuation.definition.comment.documentation.inner.rust
      push:
        - meta_scope: comment.line.documentation.inner.rust
        - match: $\n?
          pop: true

  outer_line_documentation_comment:
    - match: '///'
      scope: punctuation.definition.comment.documentation.outer.rust
      push:
        - meta_scope: comment.line.documentation.outer.rust
        - match: $\n?
          pop: true

  any_block_comment:
    - include: inner_block_documentation_comment
    - include: outer_block_documentation_comment
    - include: block_comment

  block_comment:
    - match: '/\*'
      scope: punctuation.definition.comment.begin.rust
      push:
        - include: any_block_comment # Block comments can nest
        - meta_scope: comment.block.rust
        - match: '\*/'
          scope: punctuation.definition.comment.end.rust
          pop: true

  inner_block_documentation_comment:
    - match: '/\*!'
      scope: punctuation.definition.comment.documentation.inner.begin.rust
      push:
        - include: any_block_comment # Block comments can nest
        - meta_scope: comment.block.documentation.inner.rust
        - match: '\*/'
          scope: punctuation.definition.comment.documentation.inner.end.rust
          pop: true

  outer_block_documentation_comment:
    - match: '/\*\*'
      scope: punctuation.definition.comment.documentation.outer.begin.rust
      push:
        - include: any_block_comment # Block comments can nest
        - meta_scope: comment.block.documentation.outer.rust
        - match: '\*/'
          scope: punctuation.definition.comment.documentation.outer.end.rust
          pop: true